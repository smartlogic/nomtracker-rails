iPhone API calls
-----------------

"/balances" (UsersController ln. 71) -
  calls current_user.iphone_balances, which returns a stripped down XML version of a user's balances.

"/emails" (StartController ln. 75) -
  returns XML containing only primary email addresses for users in current_user's network.

"/transactions_with_user/:id" (StartController ln. 79) -
  calls current_user.transactions_with(id) to return custom XML for all transactions between current_user and User.find_by_id(id), or returns an empty set if User.find_by_id(id) is nil

TransactionsController.set_iphone_params (private method, TransactionsController ln. 66) -
  Method to properly set params sent from the iPhone into the configuration expected by the Rails app.
  The :email and :transaction_type parameters are not attributes on transaction, and the Rails app expects them as params[:email],
  not params[:transaction][:email], which is how they are returned from the iPhone. This function properly sets the parameters so that
  the :create method can function without having to update it significantly.

ApplicationController.is_iphone_request? (private method, ApplicationController ln. 24) -
  A before filter that checks a request's :user_agent parameter to see if it came from the iPhone. Right now it's set to work with
  the iPhone simulator, so the Regexp it matches against may have to change once we can test on an actualy iP(hone|od). But any
  changes will only have to take place in this one function.

ApplicationController.set_iphone_format (private method, ApplicationController ln. 28) -
  If :is_iphone_request? returns true, this sets the request's :format parameter to :iphone so that the controller's
    respond_to do |format|
  will act correctly when data is sent from an iPhone.


Testing the iPhone App
-----------------------

Paul Barry suggseted the scan_build tool as a way to check for memory leaks in an iPhone app. The steps to install and use the tool:

$ cd src
$ curl -O http://checker.minormatter.com/checker-0.215.tar.bz2
$ bunzip2 checker-0.215.tar.bz2
$ tar xf checker-0.215.tar
$ ln -s ~/src/checker-0.215/scan-build ~/bin/scan-build

That last command assumes you have ~/bin in your path, you could also do "sudo ln -s checker-0.215/scan-build /usr/bin/scan-build" if you like.  Next, go into the directory than contains the .xcodeproj directory for your iPhone app:

$ cd ~/Development/study/Objective-C/CS193P/Lecture1/Assignment1A/HelloStanford
$ xcodebuild clean

That last command is the same as running "Build > Clean" in XCode.  Now you can run scan build:

$ scan-build -k -V xcodebuild -configuration Debug -sdk iphonesimulator3.0

If that errors about saying The identity 'Whatever' doesn't match blah blah blah, you need to go to Project > Edit Project Settings and set it to not try to code sign.  See this URL for more info:

http://www.oiledmachine.com/posts/2009/01/06/using-the-llvm-clang-static-analyzer-for-iphone-apps.html

